// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Pointer<ffi.Void>)>(
    symbol: 'flutter_filament_web_load_resource_callback',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_load_resource_callback(
  ffi.Pointer<ffi.Void> data,
  int length,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<ffi.Char Function(ffi.Pointer<ffi.Char>, ffi.Int32)>(
    symbol: 'flutter_filament_web_get',
    assetId: 'package:dart_filament/dart_filament.dart')
external int flutter_filament_web_get(
  ffi.Pointer<ffi.Char> ptr,
  int offset,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<ffi.Float>, ffi.Int32)>(
    symbol: 'flutter_filament_web_get_float',
    assetId: 'package:dart_filament/dart_filament.dart')
external double flutter_filament_web_get_float(
  ffi.Pointer<ffi.Float> ptr,
  int offset,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Int32)>(
    symbol: 'flutter_filament_web_get_double',
    assetId: 'package:dart_filament/dart_filament.dart')
external double flutter_filament_web_get_double(
  ffi.Pointer<ffi.Double> ptr,
  int offset,
);

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int32)>(
    symbol: 'flutter_filament_web_get_pointer',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Void> flutter_filament_web_get_pointer(
  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
  int offset,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32, ffi.Int32)>(
    symbol: 'flutter_filament_web_set',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_set(
  ffi.Pointer<ffi.Char> ptr,
  int offset,
  int val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int32, ffi.Float)>(
    symbol: 'flutter_filament_web_set_float',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_set_float(
  ffi.Pointer<ffi.Float> ptr,
  int offset,
  double val,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Int32, ffi.Double)>(
    symbol: 'flutter_filament_web_set_double',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_set_double(
  ffi.Pointer<ffi.Double> ptr,
  int offset,
  double val,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int32,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'flutter_filament_web_set_pointer',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_set_pointer(
  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
  int offset,
  ffi.Pointer<ffi.Void> val,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Int32)>(
    symbol: 'flutter_filament_web_get_int32',
    assetId: 'package:dart_filament/dart_filament.dart')
external int flutter_filament_web_get_int32(
  ffi.Pointer<ffi.Int32> ptr,
  int offset,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Int32>, ffi.Int32, ffi.Int32)>(
    symbol: 'flutter_filament_web_set_int32',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_set_int32(
  ffi.Pointer<ffi.Int32> ptr,
  int offset,
  int value,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>(
    symbol: 'flutter_filament_web_get_address',
    assetId: 'package:dart_filament/dart_filament.dart')
external int flutter_filament_web_get_address(
  ffi.Pointer<ffi.Pointer<ffi.Void>> out,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Int32)>(
    symbol: 'flutter_filament_web_allocate',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Void> flutter_filament_web_allocate(
  int size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'flutter_filament_web_free',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_web_free(
  ffi.Pointer<ffi.Void> ptr,
);

@ffi.Native<ffi.Int Function()>(
    symbol: 'flutter_filament_web_create_gl_context',
    assetId: 'package:dart_filament/dart_filament.dart')
external int flutter_filament_web_create_gl_context();

@ffi.Native<ffi.Pointer<ffi.Void> Function()>(
    symbol: 'flutter_filament_web_get_resource_loader_wrapper',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Void>
    flutter_filament_web_get_resource_loader_wrapper();

@ffi.Native<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ResourceLoaderWrapper>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'create_filament_viewer',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Void> create_filament_viewer(
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<ResourceLoaderWrapper> loader,
  ffi.Pointer<ffi.Void> platform,
  ffi.Pointer<ffi.Char> uberArchivePath,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'destroy_filament_viewer',
    assetId: 'package:dart_filament/dart_filament.dart')
external void destroy_filament_viewer(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_scene_manager',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Void> get_scene_manager(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.IntPtr, ffi.Uint32, ffi.Uint32)>(
    symbol: 'create_render_target',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_render_target(
  ffi.Pointer<ffi.Void> viewer,
  int texture,
  int width,
  int height,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'clear_background_image',
    assetId: 'package:dart_filament/dart_filament.dart')
external void clear_background_image(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Bool)>(
    symbol: 'set_background_image',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_background_image(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> path,
  bool fillHeight,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Bool)>(
    symbol: 'set_background_image_position',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_background_image_position(
  ffi.Pointer<ffi.Void> viewer,
  double x,
  double y,
  bool clamp,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_background_color',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_background_color(
  ffi.Pointer<ffi.Void> viewer,
  double r,
  double g,
  double b,
  double a,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>(
    symbol: 'set_tone_mapping',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_tone_mapping(
  ffi.Pointer<ffi.Void> viewer,
  int toneMapping,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>(
    symbol: 'set_bloom', assetId: 'package:dart_filament/dart_filament.dart')
external void set_bloom(
  ffi.Pointer<ffi.Void> viewer,
  double strength,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>(
    symbol: 'load_skybox', assetId: 'package:dart_filament/dart_filament.dart')
external void load_skybox(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> skyboxPath,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Float)>(
    symbol: 'load_ibl', assetId: 'package:dart_filament/dart_filament.dart')
external void load_ibl(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> iblPath,
  double intensity,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>)>(
    symbol: 'rotate_ibl', assetId: 'package:dart_filament/dart_filament.dart')
external void rotate_ibl(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Float> rotationMatrix,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'remove_skybox',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_skybox(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'remove_ibl', assetId: 'package:dart_filament/dart_filament.dart')
external void remove_ibl(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        EntityId Function(
            ffi.Pointer<ffi.Void>,
            ffi.Uint8,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Bool)>(
    symbol: 'add_light', assetId: 'package:dart_filament/dart_filament.dart')
external int add_light(
  ffi.Pointer<ffi.Void> viewer,
  int type,
  double colour,
  double intensity,
  double posX,
  double posY,
  double posZ,
  double dirX,
  double dirY,
  double dirZ,
  bool shadows,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'remove_light', assetId: 'package:dart_filament/dart_filament.dart')
external void remove_light(
  ffi.Pointer<ffi.Void> viewer,
  int entityId,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'clear_lights', assetId: 'package:dart_filament/dart_filament.dart')
external void clear_lights(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        EntityId Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'load_glb', assetId: 'package:dart_filament/dart_filament.dart')
external int load_glb(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<ffi.Char> assetPath,
  int numInstances,
);

@ffi.Native<
        EntityId Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(
    symbol: 'load_glb_from_buffer',
    assetId: 'package:dart_filament/dart_filament.dart')
external int load_glb_from_buffer(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<ffi.Void> data,
  int length,
);

@ffi.Native<
        EntityId Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'load_gltf', assetId: 'package:dart_filament/dart_filament.dart')
external int load_gltf(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<ffi.Char> assetPath,
  ffi.Pointer<ffi.Char> relativePath,
);

@ffi.Native<EntityId Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'create_instance',
    assetId: 'package:dart_filament/dart_filament.dart')
external int create_instance(
  ffi.Pointer<ffi.Void> sceneManager,
  int id,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'get_instance_count',
    assetId: 'package:dart_filament/dart_filament.dart')
external int get_instance_count(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<EntityId>)>(
    symbol: 'get_instances',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_instances(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
  ffi.Pointer<EntityId> out,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'set_main_camera',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_main_camera(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<EntityId Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_main_camera',
    assetId: 'package:dart_filament/dart_filament.dart')
external int get_main_camera(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Char>)>(
    symbol: 'set_camera', assetId: 'package:dart_filament/dart_filament.dart')
external bool set_camera(
  ffi.Pointer<ffi.Void> viewer,
  int asset,
  ffi.Pointer<ffi.Char> nodeName,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>(
    symbol: 'set_view_frustum_culling',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_view_frustum_culling(
  ffi.Pointer<ffi.Void> viewer,
  bool enabled,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Uint64,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Void> buf, ffi.Size size,
                        ffi.Pointer<ffi.Void> data)>>,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'render', assetId: 'package:dart_filament/dart_filament.dart')
external void render(
  ffi.Pointer<ffi.Void> viewer,
  int frameTimeInNanos,
  ffi.Pointer<ffi.Void> pixelBuffer,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> buf, ffi.Size size,
                  ffi.Pointer<ffi.Void> data)>>
      callback,
  ffi.Pointer<ffi.Void> data,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Uint32, ffi.Uint32)>(
    symbol: 'create_swap_chain',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_swap_chain(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Void> window,
  int width,
  int height,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'destroy_swap_chain',
    assetId: 'package:dart_filament/dart_filament.dart')
external void destroy_swap_chain(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>(
    symbol: 'set_frame_interval',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_frame_interval(
  ffi.Pointer<ffi.Void> viewer,
  double interval,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32, ffi.Float)>(
    symbol: 'update_viewport_and_camera_projection',
    assetId: 'package:dart_filament/dart_filament.dart')
external void update_viewport_and_camera_projection(
  ffi.Pointer<ffi.Void> viewer,
  int width,
  int height,
  double scaleFactor,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'scroll_begin', assetId: 'package:dart_filament/dart_filament.dart')
external void scroll_begin(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'scroll_update',
    assetId: 'package:dart_filament/dart_filament.dart')
external void scroll_update(
  ffi.Pointer<ffi.Void> viewer,
  double x,
  double y,
  double z,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'scroll_end', assetId: 'package:dart_filament/dart_filament.dart')
external void scroll_end(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Bool)>(
    symbol: 'grab_begin', assetId: 'package:dart_filament/dart_filament.dart')
external void grab_begin(
  ffi.Pointer<ffi.Void> viewer,
  double x,
  double y,
  bool pan,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float)>(
    symbol: 'grab_update', assetId: 'package:dart_filament/dart_filament.dart')
external void grab_update(
  ffi.Pointer<ffi.Void> viewer,
  double x,
  double y,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'grab_end', assetId: 'package:dart_filament/dart_filament.dart')
external void grab_end(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, ffi.Int)>(
    symbol: 'apply_weights',
    assetId: 'package:dart_filament/dart_filament.dart')
external void apply_weights(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> entityName,
  ffi.Pointer<ffi.Float> weights,
  int count,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Float>, ffi.Int)>(
    symbol: 'set_morph_target_weights',
    assetId: 'package:dart_filament/dart_filament.dart')
external bool set_morph_target_weights(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Float> morphData,
  int numWeights,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Int>,
            ffi.Int,
            ffi.Int,
            ffi.Float)>(
    symbol: 'set_morph_animation',
    assetId: 'package:dart_filament/dart_filament.dart')
external bool set_morph_animation(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Float> morphData,
  ffi.Pointer<ffi.Int> morphIndices,
  int numMorphTargets,
  int numFrames,
  double frameLengthInMs,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'reset_to_rest_pose',
    assetId: 'package:dart_filament/dart_filament.dart')
external void reset_to_rest_pose(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
            ffi.Float,
            ffi.Bool)>(
    symbol: 'add_bone_animation',
    assetId: 'package:dart_filament/dart_filament.dart')
external void add_bone_animation(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Float> frameData,
  int numFrames,
  ffi.Pointer<ffi.Char> boneName,
  ffi.Pointer<ffi.Pointer<ffi.Char>> meshNames,
  int numMeshTargets,
  double frameLengthInMs,
  bool isModelSpace,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'set_bone_transform',
    assetId: 'package:dart_filament/dart_filament.dart')
external bool set_bone_transform(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> entityName,
  ffi.Pointer<ffi.Float> transform,
  ffi.Pointer<ffi.Char> boneName,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int, ffi.Bool,
            ffi.Bool, ffi.Bool, ffi.Float)>(
    symbol: 'play_animation',
    assetId: 'package:dart_filament/dart_filament.dart')
external void play_animation(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int index,
  bool loop,
  bool reverse,
  bool replaceActive,
  double crossfade,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int, ffi.Int)>(
    symbol: 'set_animation_frame',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_animation_frame(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int animationIndex,
  int animationFrame,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int)>(
    symbol: 'stop_animation',
    assetId: 'package:dart_filament/dart_filament.dart')
external void stop_animation(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int index,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'get_animation_count',
    assetId: 'package:dart_filament/dart_filament.dart')
external int get_animation_count(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'get_animation_name',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_animation_name(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> outPtr,
  int index,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int)>(
    symbol: 'get_animation_duration',
    assetId: 'package:dart_filament/dart_filament.dart')
external double get_animation_duration(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int index,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(
    symbol: 'get_morph_target_name',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_morph_target_name(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
  ffi.Pointer<ffi.Char> outPtr,
  int index,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Char>)>(
    symbol: 'get_morph_target_name_count',
    assetId: 'package:dart_filament/dart_filament.dart')
external int get_morph_target_name_count(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'remove_entity',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_entity(
  ffi.Pointer<ffi.Void> viewer,
  int asset,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'clear_entities',
    assetId: 'package:dart_filament/dart_filament.dart')
external void clear_entities(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Bool Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float)>(
    symbol: 'set_material_color',
    assetId: 'package:dart_filament/dart_filament.dart')
external bool set_material_color(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
  int materialIndex,
  double r,
  double g,
  double b,
  double a,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'transform_to_unit_cube',
    assetId: 'package:dart_filament/dart_filament.dart')
external void transform_to_unit_cube(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Float, ffi.Float,
            ffi.Float, ffi.Bool)>(
    symbol: 'queue_position_update',
    assetId: 'package:dart_filament/dart_filament.dart')
external void queue_position_update(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  double x,
  double y,
  double z,
  bool relative,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Float, ffi.Float,
            ffi.Float, ffi.Float, ffi.Float, ffi.Bool)>(
    symbol: 'queue_rotation_update',
    assetId: 'package:dart_filament/dart_filament.dart')
external void queue_rotation_update(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  double rads,
  double x,
  double y,
  double z,
  double w,
  bool relative,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_position', assetId: 'package:dart_filament/dart_filament.dart')
external void set_position(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  double x,
  double y,
  double z,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Float, ffi.Float,
            ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_rotation', assetId: 'package:dart_filament/dart_filament.dart')
external void set_rotation(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  double rads,
  double x,
  double y,
  double z,
  double w,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Float)>(
    symbol: 'set_scale', assetId: 'package:dart_filament/dart_filament.dart')
external void set_scale(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  double scale,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'move_camera_to_asset',
    assetId: 'package:dart_filament/dart_filament.dart')
external void move_camera_to_asset(
  ffi.Pointer<ffi.Void> viewer,
  int asset,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_camera_exposure',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_exposure(
  ffi.Pointer<ffi.Void> viewer,
  double aperture,
  double shutterSpeed,
  double sensitivity,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_camera_position',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_position(
  ffi.Pointer<ffi.Void> viewer,
  double x,
  double y,
  double z,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_position',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_camera_position(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_camera_rotation',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_rotation(
  ffi.Pointer<ffi.Void> viewer,
  double w,
  double x,
  double y,
  double z,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>)>(
    symbol: 'set_camera_model_matrix',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_model_matrix(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Float> matrix,
);

@ffi.Native<ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_model_matrix',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Double> get_camera_model_matrix(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_view_matrix',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Double> get_camera_view_matrix(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_projection_matrix',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Double> get_camera_projection_matrix(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
            ffi.Double, ffi.Double)>(
    symbol: 'set_camera_projection_matrix',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_projection_matrix(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Double> matrix,
  double near,
  double far,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Double, ffi.Double)>(
    symbol: 'set_camera_culling',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_culling(
  ffi.Pointer<ffi.Void> viewer,
  double near,
  double far,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_culling_near',
    assetId: 'package:dart_filament/dart_filament.dart')
external double get_camera_culling_near(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_culling_far',
    assetId: 'package:dart_filament/dart_filament.dart')
external double get_camera_culling_far(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_culling_projection_matrix',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Double> get_camera_culling_projection_matrix(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'get_camera_frustum',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Double> get_camera_frustum(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float)>(
    symbol: 'set_camera_fov',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_fov(
  ffi.Pointer<ffi.Void> viewer,
  double fovInDegrees,
  double aspect,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>(
    symbol: 'set_camera_focal_length',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_focal_length(
  ffi.Pointer<ffi.Void> viewer,
  double focalLength,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>(
    symbol: 'set_camera_focus_distance',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_focus_distance(
  ffi.Pointer<ffi.Void> viewer,
  double focusDistance,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, _ManipulatorMode, ffi.Double,
            ffi.Double, ffi.Double)>(
    symbol: 'set_camera_manipulator_options',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_manipulator_options(
  ffi.Pointer<ffi.Void> viewer,
  int mode,
  double orbitSpeedX,
  double orbitSpeedY,
  double zoomSpeed,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Char>)>(
    symbol: 'hide_mesh', assetId: 'package:dart_filament/dart_filament.dart')
external int hide_mesh(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
);

@ffi.Native<
        ffi.Int Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Char>)>(
    symbol: 'reveal_mesh', assetId: 'package:dart_filament/dart_filament.dart')
external int reveal_mesh(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>(
    symbol: 'set_post_processing',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_post_processing(
  ffi.Pointer<ffi.Void> viewer,
  bool enabled,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool, ffi.Bool, ffi.Bool)>(
    symbol: 'set_antialiasing',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_antialiasing(
  ffi.Pointer<ffi.Void> viewer,
  bool msaa,
  bool fxaa,
  bool taa,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        EntityId entityId, ffi.Int x, ffi.Int y)>>)>(
    symbol: 'filament_pick',
    assetId: 'package:dart_filament/dart_filament.dart')
external void filament_pick(
  ffi.Pointer<ffi.Void> viewer,
  int x,
  int y,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(EntityId entityId, ffi.Int x, ffi.Int y)>>
      callback,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'get_name_for_entity',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Char> get_name_for_entity(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
);

@ffi.Native<
        EntityId Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Pointer<ffi.Char>)>(
    symbol: 'find_child_entity_by_name',
    assetId: 'package:dart_filament/dart_filament.dart')
external int find_child_entity_by_name(
  ffi.Pointer<ffi.Void> sceneManager,
  int parent,
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Bool)>(
    symbol: 'get_entity_count',
    assetId: 'package:dart_filament/dart_filament.dart')
external int get_entity_count(
  ffi.Pointer<ffi.Void> sceneManager,
  int target,
  bool renderableOnly,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Bool, ffi.Pointer<EntityId>)>(
    symbol: 'get_entities', assetId: 'package:dart_filament/dart_filament.dart')
external void get_entities(
  ffi.Pointer<ffi.Void> sceneManager,
  int target,
  bool renderableOnly,
  ffi.Pointer<EntityId> out,
);

@ffi.Native<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Void>, EntityId, ffi.Int, ffi.Bool)>(
    symbol: 'get_entity_name_at',
    assetId: 'package:dart_filament/dart_filament.dart')
external ffi.Pointer<ffi.Char> get_entity_name_at(
  ffi.Pointer<ffi.Void> sceneManager,
  int target,
  int index,
  bool renderableOnly,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>(
    symbol: 'set_recording',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_recording(
  ffi.Pointer<ffi.Void> viewer,
  bool recording,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>(
    symbol: 'set_recording_output_directory',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_recording_output_directory(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> outputDirectory,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'ios_dummy', assetId: 'package:dart_filament/dart_filament.dart')
external void ios_dummy();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'flutter_filament_free',
    assetId: 'package:dart_filament/dart_filament.dart')
external void flutter_filament_free(
  ffi.Pointer<ffi.Void> ptr,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(EntityId entityId1, EntityId entityId2)>>,
            ffi.Bool)>(
    symbol: 'add_collision_component',
    assetId: 'package:dart_filament/dart_filament.dart')
external void add_collision_component(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(EntityId entityId1, EntityId entityId2)>>
      callback,
  bool affectsCollidingTransform,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'remove_collision_component',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_collision_component(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'add_animation_component',
    assetId: 'package:dart_filament/dart_filament.dart')
external bool add_animation_component(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
);

@ffi.Native<
        EntityId Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.Pointer<ffi.Uint16>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>)>(
    symbol: 'create_geometry',
    assetId: 'package:dart_filament/dart_filament.dart')
external int create_geometry(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Float> vertices,
  int numVertices,
  ffi.Pointer<ffi.Uint16> indices,
  int numIndices,
  int primitiveType,
  ffi.Pointer<ffi.Char> materialPath,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, EntityId)>(
    symbol: 'set_parent', assetId: 'package:dart_filament/dart_filament.dart')
external void set_parent(
  ffi.Pointer<ffi.Void> sceneManager,
  int child,
  int parent,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'test_collisions',
    assetId: 'package:dart_filament/dart_filament.dart')
external void test_collisions(
  ffi.Pointer<ffi.Void> sceneManager,
  int entity,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int)>(
    symbol: 'set_priority', assetId: 'package:dart_filament/dart_filament.dart')
external void set_priority(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
  int priority,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<EntityId>)>(
    symbol: 'get_gizmo', assetId: 'package:dart_filament/dart_filament.dart')
external void get_gizmo(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<EntityId> out,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ResourceLoaderWrapper>,
            ffi
                .Pointer<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void> renderCallbackOwner)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Void> viewer)>>)>(
    symbol: 'create_filament_viewer_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_filament_viewer_ffi(
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<ffi.Void> platform,
  ffi.Pointer<ffi.Char> uberArchivePath,
  ffi.Pointer<ResourceLoaderWrapper> loader,
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> renderCallbackOwner)>>
      renderCallback,
  ffi.Pointer<ffi.Void> renderCallbackOwner,
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> viewer)>>
      callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Uint32,
            ffi.Uint32,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'create_swap_chain_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_swap_chain_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Void> surface,
  int width,
  int height,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> onComplete,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'destroy_swap_chain_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void destroy_swap_chain_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> onComplete,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.IntPtr, ffi.Uint32,
            ffi.Uint32, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'create_render_target_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_render_target_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int nativeTextureId,
  int width,
  int height,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> onComplete,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'destroy_filament_viewer_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void destroy_filament_viewer_ffi(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'render_ffi', assetId: 'package:dart_filament/dart_filament.dart')
external void render_ffi(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<FilamentRenderCallback Function(FilamentRenderCallback)>(
    symbol: 'make_render_callback_fn_pointer',
    assetId: 'package:dart_filament/dart_filament.dart')
external FilamentRenderCallback make_render_callback_fn_pointer(
  FilamentRenderCallback arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>(
    symbol: 'set_rendering_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_rendering_ffi(
  ffi.Pointer<ffi.Void> viewer,
  bool rendering,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>(
    symbol: 'set_frame_interval_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_frame_interval_ffi(
  ffi.Pointer<ffi.Void> viewer,
  double frameInterval,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
            ffi.Float, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'update_viewport_and_camera_projection_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void update_viewport_and_camera_projection_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int width,
  int height,
  double scaleFactor,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> onComplete,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Float, ffi.Float)>(
    symbol: 'set_background_color_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_background_color_ffi(
  ffi.Pointer<ffi.Void> viewer,
  double r,
  double g,
  double b,
  double a,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'clear_background_image_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void clear_background_image_ffi(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
            ffi.Bool, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'set_background_image_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_background_image_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> path,
  bool fillHeight,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> onComplete,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Float, ffi.Float, ffi.Bool)>(
    symbol: 'set_background_image_position_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_background_image_position_ffi(
  ffi.Pointer<ffi.Void> viewer,
  double x,
  double y,
  bool clamp,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>(
    symbol: 'set_tone_mapping_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_tone_mapping_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int toneMapping,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>(
    symbol: 'set_bloom_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_bloom_ffi(
  ffi.Pointer<ffi.Void> viewer,
  double strength,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'load_skybox_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void load_skybox_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> skyboxPath,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> onComplete,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Float)>(
    symbol: 'load_ibl_ffi', assetId: 'package:dart_filament/dart_filament.dart')
external void load_ibl_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Char> iblPath,
  double intensity,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'remove_skybox_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_skybox_ffi(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'remove_ibl_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_ibl_ffi(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Uint8,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Float,
            ffi.Bool,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>>)>(
    symbol: 'add_light_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void add_light_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int type,
  double colour,
  double intensity,
  double posX,
  double posY,
  double posZ,
  double dirX,
  double dirY,
  double dirZ,
  bool shadows,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>> callback,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'remove_light_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_light_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int entityId,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(
    symbol: 'clear_lights_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void clear_lights_ffi(
  ffi.Pointer<ffi.Void> viewer,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>>)>(
    symbol: 'load_glb_ffi', assetId: 'package:dart_filament/dart_filament.dart')
external void load_glb_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<ffi.Char> assetPath,
  int numInstances,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Int,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>>)>(
    symbol: 'load_glb_from_buffer_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void load_glb_from_buffer_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<ffi.Void> data,
  int length,
  int numInstances,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>>)>(
    symbol: 'load_gltf_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void load_gltf_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  ffi.Pointer<ffi.Char> assetPath,
  ffi.Pointer<ffi.Char> relativePath,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>> callback,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>>)>(
    symbol: 'create_instance_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_instance_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>> callback,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'remove_entity_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void remove_entity_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int asset,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> callback,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'clear_entities_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void clear_entities_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>)>(
    symbol: 'set_camera_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_camera_ffi(
  ffi.Pointer<ffi.Void> viewer,
  int asset,
  ffi.Pointer<ffi.Char> nodeName,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>> callback,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId,
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, ffi.Int)>(
    symbol: 'apply_weights_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void apply_weights_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> entityName,
  ffi.Pointer<ffi.Float> weights,
  int count,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int, ffi.Bool,
            ffi.Bool, ffi.Bool, ffi.Float)>(
    symbol: 'play_animation_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void play_animation_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int index,
  bool loop,
  bool reverse,
  bool replaceActive,
  double crossfade,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int, ffi.Int)>(
    symbol: 'set_animation_frame_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_animation_frame_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int animationIndex,
  int animationFrame,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId, ffi.Int)>(
    symbol: 'stop_animation_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void stop_animation_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  int index,
);

@ffi.Native<
        ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>(
    symbol: 'get_animation_count_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_animation_count_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'get_animation_name_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_animation_name_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> outPtr,
  int index,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(
    symbol: 'get_morph_target_name_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_morph_target_name_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
  ffi.Pointer<ffi.Char> outPtr,
  int index,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>)>(
    symbol: 'get_morph_target_name_count_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void get_morph_target_name_count_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> meshName,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>)>(
    symbol: 'set_morph_target_weights_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_morph_target_weights_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Float> morphData,
  int numWeights,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>)>(
    symbol: 'set_bone_transform_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_bone_transform_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Char> entityName,
  ffi.Pointer<ffi.Float> transform,
  ffi.Pointer<ffi.Char> boneName,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>> callback,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            EntityId,
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Int,
            ffi.Float,
            ffi.Bool)>(
    symbol: 'add_bone_animation_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void add_bone_animation_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int asset,
  ffi.Pointer<ffi.Float> frameData,
  int numFrames,
  ffi.Pointer<ffi.Char> boneName,
  ffi.Pointer<ffi.Pointer<ffi.Char>> meshNames,
  int numMeshTargets,
  double frameLengthInMs,
  bool isModelSpace,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>(
    symbol: 'set_post_processing_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void set_post_processing_ffi(
  ffi.Pointer<ffi.Void> viewer,
  bool enabled,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, EntityId)>(
    symbol: 'reset_to_rest_pose_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void reset_to_rest_pose_ffi(
  ffi.Pointer<ffi.Void> sceneManager,
  int entityId,
);

@ffi.Native<ffi.Void Function()>(
    symbol: 'ios_dummy_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void ios_dummy_ffi();

@ffi.Native<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.Pointer<ffi.Uint16>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>>)>(
    symbol: 'create_geometry_ffi',
    assetId: 'package:dart_filament/dart_filament.dart')
external void create_geometry_ffi(
  ffi.Pointer<ffi.Void> viewer,
  ffi.Pointer<ffi.Float> vertices,
  int numVertices,
  ffi.Pointer<ffi.Uint16> indices,
  int numIndices,
  int primitiveType,
  ffi.Pointer<ffi.Char> materialPath,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(EntityId)>> callback,
);

final class ResourceLoaderWrapper extends ffi.Struct {
  external LoadFilamentResource loadResource;

  external FreeFilamentResource freeResource;

  external LoadFilamentResourceFromOwner loadFromOwner;

  external FreeFilamentResourceFromOwner freeFromOwner;

  external ffi.Pointer<ffi.Void> owner;

  external LoadFilamentResourceIntoOutPointer loadToOut;
}

typedef LoadFilamentResource
    = ffi.Pointer<ffi.NativeFunction<LoadFilamentResourceFunction>>;
typedef LoadFilamentResourceFunction = ResourceBuffer Function(
    ffi.Pointer<ffi.Char> uri);

final class ResourceBuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int id;
}

typedef FreeFilamentResource
    = ffi.Pointer<ffi.NativeFunction<FreeFilamentResourceFunction>>;
typedef FreeFilamentResourceFunction = ffi.Void Function(ResourceBuffer);
typedef DartFreeFilamentResourceFunction = void Function(ResourceBuffer);
typedef LoadFilamentResourceFromOwner
    = ffi.Pointer<ffi.NativeFunction<LoadFilamentResourceFromOwnerFunction>>;
typedef LoadFilamentResourceFromOwnerFunction = ResourceBuffer Function(
    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>);
typedef FreeFilamentResourceFromOwner
    = ffi.Pointer<ffi.NativeFunction<FreeFilamentResourceFromOwnerFunction>>;
typedef FreeFilamentResourceFromOwnerFunction = ffi.Void Function(
    ResourceBuffer, ffi.Pointer<ffi.Void>);
typedef DartFreeFilamentResourceFromOwnerFunction = void Function(
    ResourceBuffer, ffi.Pointer<ffi.Void>);
typedef LoadFilamentResourceIntoOutPointer = ffi
    .Pointer<ffi.NativeFunction<LoadFilamentResourceIntoOutPointerFunction>>;
typedef LoadFilamentResourceIntoOutPointerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Char> uri, ffi.Pointer<ResourceBuffer> out);
typedef DartLoadFilamentResourceIntoOutPointerFunction = void Function(
    ffi.Pointer<ffi.Char> uri, ffi.Pointer<ResourceBuffer> out);

/// This header replicates most of the methods in FlutterFilamentApi.h, and is only intended to be used to generate client FFI bindings.
/// The intention is that calling one of these methods will call its respective method in FlutterFilamentApi.h, but wrapped in some kind of thread runner to ensure thread safety.
typedef EntityId = ffi.Int32;
typedef DartEntityId = int;
typedef _ManipulatorMode = ffi.Int32;
typedef Dart_ManipulatorMode = int;
typedef FilamentRenderCallback
    = ffi.Pointer<ffi.NativeFunction<FilamentRenderCallbackFunction>>;
typedef FilamentRenderCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> owner);
typedef DartFilamentRenderCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> owner);

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;
